from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.enums.chat_type import ChatType
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup

from urllib.parse import urlparse
import datetime

from bot.database.methods import (
    select_max_role_id, create_user, check_role, check_user,
    select_user_operations, select_user_items, check_user_referrals
)
from bot.handlers.other import check_sub_channel, get_bot_info
from bot.keyboards import main_menu, back, simple_buttons, profile_keyboard
from bot.misc import TgConfig, EnvKeys

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä—ã
from bot.handlers.user.balance_and_payment import router as balance_and_payment_router
from bot.handlers.user.shop_and_goods import router as shop_and_goods_router

router = Router()


# FSM —Å—Ü–µ–Ω–∞—Ä–∏–∏
class UserStates(StatesGroup):
    main_menu = State()


# --- /start
@router.message(F.text.startswith('/start'))
async def start(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start:
    - –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–æ–≤—ã–π)
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    if message.chat.type != ChatType.PRIVATE:
        return

    user_id = message.from_user.id
    await state.clear()

    owner = select_max_role_id()
    referral_id = message.text[7:] if message.text[7:] != str(user_id) else None
    user_role = owner if str(user_id) == EnvKeys.OWNER_ID else 1
    create_user(telegram_id=user_id, registration_date=datetime.datetime.now(), referral_id=referral_id, role=user_role)

    chat = TgConfig.CHANNEL_URL.lstrip('https://t.me/')
    role_data = check_role(user_id)

    try:
        if chat:
            chat_member = await message.bot.get_chat_member(chat_id=f'@{chat}', user_id=user_id)
            if not await check_sub_channel(chat_member):
                markup = simple_buttons([
                    ("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", f"https://t.me/{chat}"),
                    ("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", "sub_channel_done")
                ], per_row=1)
                await message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª', reply_markup=markup)
                await message.delete()
                return
    except Exception:
        pass

    markup = main_menu(role=role_data, channel=chat, helper=TgConfig.HELPER_URL)
    await message.answer('‚õ©Ô∏è –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)
    await message.delete()
    await state.set_state(UserStates.main_menu)


# --- –ö–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
@router.callback_query(F.data == "back_to_menu")
async def back_to_menu_callback_handler(call: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    user_id = call.from_user.id
    user = check_user(user_id)
    markup = main_menu(role=user.role_id, channel=TgConfig.CHANNEL_URL, helper=TgConfig.HELPER_URL)
    await call.message.edit_text('‚õ©Ô∏è –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)
    await state.set_state(UserStates.main_menu)


# --- –ü—Ä–∞–≤–∏–ª–∞
@router.callback_query(F.data == "rules")
async def rules_callback_handler(call: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª, –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–¥–∞–Ω—ã.
    """
    rules_data = TgConfig.RULES
    if rules_data:
        await call.message.edit_text(rules_data, reply_markup=back("back_to_menu"))
    else:
        await call.answer('‚ùå –ü—Ä–∞–≤–∏–ª–∞ –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã')
    await state.clear()


# --- –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == "profile")
async def profile_callback_handler(call: CallbackQuery, state: FSMContext):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å (–±–∞–ª–∞–Ω—Å, –ø–æ–∫—É–ø–∫–∏, id –∏ —Ç.–¥.).
    """
    user_id = call.from_user.id
    user = call.from_user
    user_info = check_user(user_id)
    balance = user_info.balance
    operations = select_user_operations(user_id)
    overall_balance = sum(operations) if operations else 0
    items = select_user_items(user_id)
    referral = TgConfig.REFERRAL_PERCENT
    markup = profile_keyboard(referral, items)
    await call.message.edit_text(
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> ‚Äî {user.first_name}\n"
        f"üÜî <b>ID</b> ‚Äî <code>{user_id}</code>\n"
        f"üí≥ <b>–ë–∞–ª–∞–Ω—Å</b> ‚Äî <code>{balance}</code> ‚ÇΩ\n"
        f"üíµ <b>–í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ</b> ‚Äî <code>{overall_balance}</code> ‚ÇΩ\n"
        f"üéÅ <b>–ö—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤</b> ‚Äî {items} —à—Ç",
        reply_markup=markup,
        parse_mode='HTML'
    )
    await state.clear()


# --- –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
@router.callback_query(F.data == "referral_system")
async def referral_callback_handler(call: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = call.from_user.id
    referrals = check_user_referrals(user_id)
    referral_percent = TgConfig.REFERRAL_PERCENT
    bot_username = await get_bot_info(call)
    await call.message.edit_text(
        f'üíö –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n'
        f'üîó –°—Å—ã–ª–∫–∞: https://t.me/{bot_username}?start={user_id}\n'
        f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals}\n'
        f'üìî –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∑–≤–æ–ª–∏—Ç –í–∞–º –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω—å–≥–∏ –±–µ–∑ –≤—Å—è–∫–∏—Ö –≤–ª–æ–∂–µ–Ω–∏–π. '
        f'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å–µ–≥–æ –ª–∏—à—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å '
        f'{referral_percent}% –æ—Ç —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –í–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–∞ –í–∞—à –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞.',
        reply_markup=back('profile')
    )
    await state.clear()


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å")
@router.callback_query(F.data == "sub_channel_done")
async def check_sub_to_channel(call: CallbackQuery, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å".
    """
    user_id = call.from_user.id
    chat = TgConfig.CHANNEL_URL
    parsed_url = urlparse(chat)
    channel_username = parsed_url.path.lstrip('/')
    helper = TgConfig.HELPER_URL
    chat_member = await call.bot.get_chat_member(chat_id='@' + channel_username, user_id=user_id)

    if await check_sub_channel(chat_member):
        user = check_user(user_id)
        role = user.role_id
        markup = main_menu(role, chat, helper)
        await call.message.edit_text('‚õ©Ô∏è –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)
        await state.set_state(UserStates.main_menu)
    else:
        await call.answer('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å')


# –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã (user-—Ä–∞–∑–¥–µ–ª—ã)
router.include_router(balance_and_payment_router)
router.include_router(shop_and_goods_router)
