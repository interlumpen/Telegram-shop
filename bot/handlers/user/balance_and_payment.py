import datetime
from decimal import Decimal, ROUND_HALF_UP

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StatesGroup, State

from bot.database.methods import (
    get_user_balance, get_item_info, get_item_value, buy_item, add_bought_item,
    buy_item_for_balance, start_operation, select_unfinished_operations,
    get_user_referral, finish_operation, update_balance, create_operation
)
from bot.keyboards import back, payment_menu, close, get_payment_choice
from bot.logger_mesh import audit_logger
from bot.misc import TgConfig, EnvKeys
from bot.handlers.other import _any_payment_method_enabled
from bot.misc.payment import quick_pay, check_payment_status, CryptoPayAPI
from bot.filters import ValidAmountFilter

router = Router()


class BalanceStates(StatesGroup):
    """
    –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.
    """
    waiting_amount = State()
    waiting_payment = State()


# --- –•—ç–Ω–¥–ª–µ—Ä: –Ω–∞—á–∞–ª–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
@router.callback_query(F.data == "replenish_balance")
async def replenish_balance_callback_handler(call: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.
    –†–∞–∑—Ä–µ—à–∞–µ—Ç –≤—Ö–æ–¥, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã.
    """
    if not _any_payment_method_enabled():
        await call.answer('‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ', show_alert=True)
        return

    await call.message.edit_text(
        'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:',
        reply_markup=back('profile')
    )
    await state.set_state(BalanceStates.waiting_amount)


# --- –•—ç–Ω–¥–ª–µ—Ä: –≤–≤–æ–¥ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–≤–∞–ª–∏–¥–Ω–∞—è —Å—É–º–º–∞)
@router.message(BalanceStates.waiting_amount, ValidAmountFilter())
async def replenish_balance_amount(message: Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—É–º–º—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.
    """
    amount = int(message.text)
    await state.update_data(amount=amount)

    await message.answer(
        'üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã',
        reply_markup=get_payment_choice()
    )
    await state.set_state(BalanceStates.waiting_payment)


# --- –•—ç–Ω–¥–ª–µ—Ä: –≤–≤–æ–¥ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞)
@router.message(BalanceStates.waiting_amount)
async def invalid_amount(message: Message, state: FSMContext):
    """
    –°–æ–æ–±—â–∞–µ—Ç –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.
    """
    await message.answer(
        "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. "
        "–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –Ω–µ –º–µ–Ω—å—à–µ 20‚ÇΩ –∏ –Ω–µ –±–æ–ª–µ–µ 10 000‚ÇΩ",
        reply_markup=back('replenish_balance')
    )


# --- –•—ç–Ω–¥–ª–µ—Ä: –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
@router.callback_query(BalanceStates.waiting_payment, F.data.in_(['pay_yoomoney', 'pay_cryptopay']))
async def process_replenish_balance(call: CallbackQuery, state: FSMContext):
    """
    –°–æ–∑–¥–∞—ë—Ç –ø–ª–∞—Ç—ë–∂ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–ø–ª–∞—Ç–∏—Ç—å.
    """
    data = await state.get_data()
    amount = data.get('amount')
    if amount is None:
        await call.answer("–°–µ—Å—Å–∏—è –æ–ø–ª–∞—Ç—ã —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        await call.message.edit_text("‚õ©Ô∏è –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=back('back_to_menu'))
        await state.clear()
        return

    amount_dec = Decimal(amount).quantize(Decimal("1."), rounding=ROUND_HALF_UP)
    ttl_seconds = int(TgConfig.PAYMENT_TIME)

    if call.data == "pay_cryptopay":
        if not EnvKeys.CRYPTO_PAY_TOKEN:
            await call.answer("‚ùå CryptoPay –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", show_alert=True)
            return
        try:
            crypto = CryptoPayAPI()
            invoice = await crypto.create_invoice(
                amount=float(amount_dec),
                currency="RUB",
                accepted_assets="TON,USDT,BTC,ETH",
                payload=str(call.from_user.id),
                expires_in=TgConfig.PAYMENT_TIME
            )
        except Exception as e:
            await call.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞: {e}", show_alert=True)
            return

        pay_url = invoice.get("mini_app_invoice_url")
        invoice_id = invoice.get("invoice_id")

        await state.update_data(invoice_id=invoice_id, payment_type="cryptopay")
        start_operation(call.from_user.id, int(amount_dec), invoice_id)

        await call.message.edit_text(
            f"üíµ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {int(amount_dec)}‚ÇΩ.\n"
            f"‚åõÔ∏è –£ –≤–∞—Å –µ—Å—Ç—å {int(ttl_seconds / 60)} –º–∏–Ω—É—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É.\n"
            f"<b>‚ùóÔ∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª</b>",
            reply_markup=payment_menu(pay_url)
        )
    elif call.data == "pay_yoomoney":
        # YooMoney
        if not (EnvKeys.ACCOUNT_NUMBER and EnvKeys.ACCESS_TOKEN):
            await call.answer("‚ùå YooMoney –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", show_alert=True)
            return
        try:
            label, url = quick_pay(int(amount_dec), call.from_user.id)
        except Exception as e:
            await call.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞: {e}", show_alert=True)
            return

        start_operation(call.from_user.id, int(amount_dec), label)
        await state.update_data(label=label, payment_type="yoomoney")

        await call.message.edit_text(
            f'üíµ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {int(amount_dec)}‚ÇΩ.\n'
            f'‚åõÔ∏è –£ –≤–∞—Å –µ—Å—Ç—å {int(ttl_seconds / 60)} –º–∏–Ω—É—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É.\n'
            f'<b>‚ùóÔ∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª</b>',
            reply_markup=payment_menu(url)
        )


# --- –•—ç–Ω–¥–ª–µ—Ä: –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
@router.callback_query(F.data == "check")
async def checking_payment(call: CallbackQuery, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤.
    """
    user_id = call.from_user.id
    data = await state.get_data()
    payment_type = data.get("payment_type")

    if not payment_type:
        await call.answer("‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—á–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    # --- CryptoPay
    if payment_type == "cryptopay":
        invoice_id = data.get("invoice_id")
        if not invoice_id:
            await call.answer("‚ùå –°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
            await state.clear()
            return

        try:
            crypto = CryptoPayAPI()
            info = await crypto.get_invoice(invoice_id)
        except Exception as e:
            await call.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}", show_alert=True)
            return

        status = info.get("status")
        if status == "paid":
            balance_amount = int(Decimal(str(info.get("amount", "0"))).quantize(Decimal("1.")))
            referral_id = get_user_referral(user_id)

            finish_operation(invoice_id)

            if referral_id and TgConfig.REFERRAL_PERCENT:
                try:
                    referral_operation = int(
                        Decimal(TgConfig.REFERRAL_PERCENT) / Decimal(100) * Decimal(balance_amount))
                    update_balance(referral_id, referral_operation)
                    await call.bot.send_message(
                        referral_id,
                        f'‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {referral_operation}‚ÇΩ –æ—Ç –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ {call.from_user.first_name}',
                        reply_markup=close()
                    )
                except Exception:
                    pass

            create_operation(user_id, balance_amount, datetime.datetime.now())
            update_balance(user_id, balance_amount)

            await call.message.edit_text(
                f'‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {balance_amount}‚ÇΩ',
                reply_markup=back('profile')
            )
            await state.clear()

        elif status == "active":
            await call.answer("‚åõÔ∏è –ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –æ–ø–ª–∞—á–µ–Ω.")
        else:
            await call.answer("‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—á—ë—Ç–∞ –∏—Å—Ç—ë–∫.", show_alert=True)

    # --- YooMoney
    elif payment_type == "yoomoney":
        label = data.get("label")
        if not label:
            await call.answer("‚ùå –°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
            await state.clear()
            return

        info = select_unfinished_operations(label)
        if not info:
            await call.answer('‚ùå –°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert=True)
            return

        operation_value = int(info[0])
        try:
            payment_status = await check_payment_status(label)
        except Exception as e:
            await call.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}", show_alert=True)
            return

        if payment_status == "success":
            referral_id = get_user_referral(user_id)
            finish_operation(label)

            if referral_id and TgConfig.REFERRAL_PERCENT:
                try:
                    referral_operation = int(
                        Decimal(TgConfig.REFERRAL_PERCENT) / Decimal(100) * Decimal(operation_value))
                    update_balance(referral_id, referral_operation)
                    await call.bot.send_message(
                        referral_id,
                        f'‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {referral_operation}‚ÇΩ –æ—Ç –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ {call.from_user.first_name}',
                        reply_markup=close()
                    )
                except Exception:
                    pass

            create_operation(user_id, operation_value, datetime.datetime.now())
            update_balance(user_id, operation_value)

            await call.message.edit_text(
                f'‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {operation_value}‚ÇΩ',
                reply_markup=back('profile')
            )
            await state.clear()
        else:
            await call.answer('‚åõÔ∏è –ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –æ–ø–ª–∞—á–µ–Ω.')


# --- –•—ç–Ω–¥–ª–µ—Ä: –ø–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data.startswith('buy_'))
async def buy_item_callback_handler(call: CallbackQuery):
    """
    –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """
    item_name = call.data[4:]
    user_id = call.from_user.id

    item_info = get_item_info(item_name)
    if not item_info:
        await call.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    price = int(item_info["price"])
    balance = get_user_balance(user_id) or 0
    if balance < price:
        await call.message.edit_text(
            '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
            reply_markup=back(f'item_{item_name}')
        )
        return

    value_data = get_item_value(item_name)
    if not value_data:
        await call.message.edit_text(
            '‚ùå –¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏',
            reply_markup=back(f'item_{item_name}')
        )
        return

    buy_item(value_data['id'], value_data['is_infinity'])

    add_bought_item(
        value_data['item_name'],
        value_data['value'],
        price,
        user_id,
        datetime.datetime.now()
    )

    new_balance = buy_item_for_balance(user_id, price)

    await call.message.edit_text(
        f'‚úÖ –¢–æ–≤–∞—Ä –∫—É–ø–ª–µ–Ω. '
        f'<b>–ë–∞–ª–∞–Ω—Å</b>: <i>{new_balance}</i>‚ÇΩ\n\n{value_data["value"]}',
        parse_mode='HTML',
        reply_markup=back(f'item_{item_name}')
    )

    # —Ç–∏—Ö–æ –∑–∞–ª–æ–≥–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É
    try:
        user_info = await call.bot.get_chat(user_id)
        audit_logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({user_info.first_name}) "
            f"–∫—É–ø–∏–ª 1 —Ç–æ–≤–∞—Ä –ø–æ–∑–∏—Ü–∏–∏ {value_data['item_name']} –∑–∞ {price}—Ä"
        )
    except Exception:
        pass
