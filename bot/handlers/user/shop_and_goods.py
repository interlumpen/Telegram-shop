from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup

from bot.database.methods import (
    get_all_categories, get_all_items, select_bought_items, get_bought_item_info, get_item_info,
    select_item_values_amount, check_value
)
from bot.keyboards import paginated_keyboard, item_info, back

router = Router()


class ShopStates(StatesGroup):
    """
    –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–∫—É–ø–æ–∫ (–¥–ª—è –ª–∏—á–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫).
    """
    viewing_goods = State()
    viewing_bought_items = State()
    viewing_categories = State()


# --- –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
@router.callback_query(F.data == "shop")
async def shop_callback_handler(call: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞–≥–∞–∑–∏–Ω–∞.
    """
    categories = get_all_categories()
    markup = paginated_keyboard(
        items=categories,
        item_text=lambda cat: cat,
        item_callback=lambda cat: f"category_{cat}",
        page=0,
        per_page=10,
        back_cb="back_to_menu",
        nav_cb_prefix="categories-page_",
    )
    await call.message.edit_text("üè™ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞", reply_markup=markup)
    await state.set_state(ShopStates.viewing_categories)


# --- –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π ‚Äî –ë–ï–ó —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.callback_query(F.data.startswith('categories-page_'))
async def navigate_categories(call: CallbackQuery):
    """
    –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞–≥–∞–∑–∏–Ω–∞.
    –§–æ—Ä–º–∞—Ç: categories-page_{page}
    """
    parts = call.data.split('_', 1)
    current_index = int(parts[1]) if len(parts) > 1 and parts[1].isdigit() else 0

    categories = get_all_categories() or []
    per_page = 10
    max_page = max((len(categories) - 1) // per_page, 0)
    current_index = max(0, min(current_index, max_page))

    markup = paginated_keyboard(
        items=categories,
        item_text=lambda cat: cat,
        item_callback=lambda cat: f"category_{cat}",
        page=current_index,
        per_page=per_page,
        back_cb="back_to_menu",
        nav_cb_prefix="categories-page_"
    )
    await call.message.edit_text('üè™ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞', reply_markup=markup)


# --- –û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî –ë–ï–ó —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.callback_query(F.data.startswith('category_'))
async def items_list_callback_handler(call: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    category_name = call.data[9:]
    goods = get_all_items(category_name)
    markup = paginated_keyboard(
        items=goods,
        item_text=lambda item: item,
        item_callback=lambda item: f"item_{item}",
        page=0,
        per_page=10,
        back_cb="shop",
        nav_cb_prefix=f"goods-page_{category_name}_",
    )
    await call.message.edit_text("üè™ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä", reply_markup=markup)
    await state.set_state(ShopStates.viewing_goods)


# --- –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.startswith('goods-page_'), ShopStates.viewing_goods)
async def navigate_goods(call: CallbackQuery):
    """
    –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    –§–æ—Ä–º–∞—Ç: goods-page_{category}_{page}
    """
    prefix = "goods-page_"
    tail = call.data[len(prefix):]  # "{category_name}_{page}"
    category_name, current_index = tail.rsplit("_", 1)  # <-- rsplit –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç '_' –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    current_index = int(current_index)

    goods = get_all_items(category_name)
    markup = paginated_keyboard(
        items=goods,
        item_text=lambda item: item,
        item_callback=lambda item: f"item_{item}",
        page=current_index,
        per_page=10,
        back_cb="shop",
        nav_cb_prefix=f"goods-page_{category_name}_",
    )
    await call.message.edit_text("üè™ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä", reply_markup=markup)


# --- –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞ ‚Äî –ë–ï–ó —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.callback_query(F.data.startswith('item_'))
async def item_info_callback_handler(call: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ.
    –†–∞–±–æ—Ç–∞–µ—Ç –≤—Å–µ–≥–¥–∞ (–±–µ–∑ FSM), —á—Ç–æ–±—ã ¬´–ù–∞–∑–∞–¥¬ª –∏–∑ –ª—é–±—ã—Ö –º–µ—Å—Ç –æ—Ç–∫—Ä—ã–≤–∞–ª –∫–∞—Ä—Ç–æ—á–∫—É.
    """
    item_name = call.data[5:]
    item_info_list = get_item_info(item_name)
    if not item_info_list:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    category = item_info_list['category_name']
    quantity = (
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ - –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ'
        if check_value(item_name)
        else f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ - {select_item_values_amount(item_name)} —à—Ç.'
    )
    markup = item_info(item_name, category)
    await call.message.edit_text(
        f'üè™ –¢–æ–≤–∞—Ä {item_name}\n'
        f'–û–ø–∏—Å–∞–Ω–∏–µ: {item_info_list["description"]}\n'
        f'–¶–µ–Ω–∞ - {item_info_list["price"]}‚ÇΩ\n'
        f'{quantity}',
        reply_markup=markup
    )


# --- –ö—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—ç—Ç–∞ —á–∞—Å—Ç—å –æ—Å—Ç–∞–≤–ª—è–µ–º —Å FSM)
@router.callback_query(F.data == "bought_items")
async def bought_items_callback_handler(call: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–æ–≤–∞—Ä–æ–≤ (—Å–æ —Å–≤–æ–µ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π).
    """
    user_id = call.from_user.id
    bought_goods = select_bought_items(user_id) or []

    markup = paginated_keyboard(
        items=bought_goods,
        item_text=lambda item: item.item_name,
        item_callback=lambda item: f"bought-item:{item.id}:bought-goods-page_user_0",
        page=0,
        per_page=10,
        back_cb="profile",
        nav_cb_prefix="bought-goods-page_user_"
    )
    await call.message.edit_text("–ö—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:", reply_markup=markup)


# --- –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
@router.callback_query(F.data.startswith('bought-goods-page_'))
async def navigate_bought_items(call: CallbackQuery):
    """
    –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ —Å–ø–∏—Å–∫—É –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –§–æ—Ä–º–∞—Ç: 'bought-goods-page_{data}_{page}', –≥–¥–µ data = 'user' –∏–ª–∏ user_id.
    """
    parts = call.data.split('_')
    if len(parts) < 3:
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")
        return

    data = parts[1]
    try:
        current_index = int(parts[2])
    except ValueError:
        current_index = 0

    if data == 'user':
        user_id = call.from_user.id
        back_cb = 'profile'
        pre_back = f'bought-goods-page_user_{current_index}'
    else:
        user_id = int(data)
        back_cb = f'check-user_{data}'
        pre_back = f'bought-goods-page_{data}_{current_index}'

    bought_goods = select_bought_items(user_id) or []

    per_page = 10
    max_page = max((len(bought_goods) - 1) // per_page, 0)
    current_index = max(0, min(current_index, max_page))

    markup = paginated_keyboard(
        items=bought_goods,
        item_text=lambda item: item.item_name,
        item_callback=lambda item: f"bought-item:{item.id}:{pre_back}",
        page=current_index,
        per_page=per_page,
        back_cb=back_cb,
        nav_cb_prefix=f"bought-goods-page_{data}_"
    )
    await call.message.edit_text("–ö—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:", reply_markup=markup)


# --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É–ø–ª–µ–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ
@router.callback_query(F.data.startswith('bought-item:'))
async def bought_item_info_callback_handler(call: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É–ø–ª–µ–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ.
    """
    _, item_id, back_data = call.data.split(':', 2)
    item = get_bought_item_info(item_id)
    if not item:
        await call.answer("–ü–æ–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    await call.message.edit_text(
        f'<b>üßæ –¢–æ–≤–∞—Ä</b>: <code>{item["item_name"]}</code>\n'
        f'<b>üíµ –¶–µ–Ω–∞</b>: <code>{item["price"]}</code>‚ÇΩ\n'
        f'<b>üïí –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏</b>: <code>{item["bought_datetime"]}</code>\n'
        f'<b>üßæ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID</b>: <code>{item["unique_id"]}</code>\n'
        f'<b>üîë –ó–Ω–∞—á–µ–Ω–∏–µ</b>:\n<code>{item["value"]}</code>',
        parse_mode='HTML',
        reply_markup=back(back_data)
    )
