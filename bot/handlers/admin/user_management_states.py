from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.filters.state import StatesGroup, State

from bot.database.models import Permission
from bot.database.methods import (
    check_user, select_user_operations, select_user_items,
    check_role_name_by_id, check_user_referrals, select_bought_items,
    set_role, create_operation, update_balance, get_role_id_by_name
)
from bot.keyboards import back, close, paginated_keyboard, simple_buttons
from bot.logger_mesh import audit_logger
from bot.filters import HasPermissionFilter

import datetime

router = Router()


class UserMgmtStates(StatesGroup):
    """FSM –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    waiting_user_id_for_check = State()
    waiting_user_replenish = State()


# --- –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@router.callback_query(F.data == 'user_management', HasPermissionFilter(Permission.USERS_MANAGE))
async def user_callback_handler(call: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/–∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
    """
    await state.clear()
    await call.message.edit_text(
        'üë§ –í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,\n—á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å | –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –¥–∞–Ω–Ω—ã–µ',
        reply_markup=back('console')
    )
    await state.set_state(UserMgmtStates.waiting_user_id_for_check)


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(UserMgmtStates.waiting_user_id_for_check, F.text)
async def check_user_data(message: Message, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π id, –µ—Å–ª–∏ ok ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.
    """
    user_id_text = message.text.strip()
    if not user_id_text.isdigit():
        await message.answer(
            '‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
            reply_markup=back('console')
        )
        return

    user = check_user(int(user_id_text))
    if not user:
        await message.answer(
            '‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ)',
            reply_markup=back('console')
        )
        return

    # –ö–Ω–æ–ø–∫–∏: –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ ‚Äú–Ω–∞–∑–∞–¥‚Äù
    markup = simple_buttons([
        ("üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", f"check-user_{user.telegram_id}"),
        ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "user_management")
    ], per_row=1)
    await message.answer(
        f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}?",
        reply_markup=markup,
        parse_mode='HTML'
    )
    await state.clear()


# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data.startswith('check-user_'), HasPermissionFilter(Permission.USERS_MANAGE))
async def user_profile_view(call: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + –¥–µ–π—Å—Ç–≤–∏—è.
    """
    user_id_str = call.data[len('check-user_'):]
    target_id = int(user_id_str)

    user = check_user(target_id)
    if not user:
        await call.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    user_info = await call.message.bot.get_chat(target_id)

    operations = select_user_operations(target_id)
    overall_balance = sum(operations) if operations else 0
    items = select_user_items(target_id)
    role = check_role_name_by_id(user.role_id)
    referrals = check_user_referrals(user.telegram_id)

    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    actions: list[tuple[str, str]] = []
    role_name = role  # 'USER' | 'ADMIN' | 'OWNER'

    if role_name == 'OWNER':  # –Ω–µ–ª—å–∑—è —Ç—Ä–æ–≥–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞
        pass
    elif role_name == 'ADMIN':
        actions.append(("‚¨áÔ∏è –°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", f"remove-admin_{target_id}"))
    else:  # USER
        actions.append(("‚¨ÜÔ∏è –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", f"set-admin_{target_id}"))

    actions.append(("üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", f"fill-user-balance_{target_id}"))
    if items:
        actions.append(("üéÅ –ö—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", f"user-items_{target_id}"))
    actions.append(("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "user_management"))

    markup = simple_buttons(actions, per_row=1)
    await call.message.edit_text(
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> ‚Äî {user_info.first_name}\n\n"
        f"üÜî <b>ID</b> ‚Äî <code>{target_id}</code>\n"
        f"üí≥ <b>–ë–∞–ª–∞–Ω—Å</b> ‚Äî <code>{user.balance}</code> ‚ÇΩ\n"
        f"üíµ <b>–í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ</b> ‚Äî <code>{overall_balance}</code> ‚ÇΩ\n"
        f"üéÅ <b>–ö—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤</b> ‚Äî {items} —à—Ç\n\n"
        f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> ‚Äî {referrals}\n"
        f"üéõ <b>–†–æ–ª—å</b> ‚Äî {role}\n"
        f"üï¢ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</b> ‚Äî <code>{user.registration_date}</code>\n",
        parse_mode='HTML',
        reply_markup=markup
    )


# --- –û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (USERS_MANAGE)
@router.callback_query(F.data.startswith('user-items_'), HasPermissionFilter(Permission.USERS_MANAGE))
async def user_items_callback_handler(call: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 0).
    –§–æ—Ä–º–∞—Ç callback_data –∫–Ω–æ–ø–∫–∏: user-items_{user_id}
    """
    try:
        user_id = int(call.data[len('user-items_'):])
    except Exception:
        await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    bought_goods = select_bought_items(user_id) or []

    markup = paginated_keyboard(
        items=bought_goods,
        item_text=lambda item: item.item_name,
        item_callback=lambda item: f"bought-item:{item.id}:bought-goods-page_{user_id}_0",
        page=0,
        per_page=10,
        back_cb=f'check-user_{user_id}',
        nav_cb_prefix=f"bought-goods-page_{user_id}_"
    )
    await call.message.edit_text("–ö—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:", reply_markup=markup)


# --- –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–º
@router.callback_query(F.data.startswith('set-admin_'), HasPermissionFilter(Permission.ADMINS_MANAGE))
async def process_admin_for_purpose(call: CallbackQuery):
    """
    –ù–∞–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º.
    """
    user_data = call.data[len('set-admin_'):]
    try:
        user_id = int(user_data)
    except Exception:
        await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    db_user = check_user(user_id)
    if not db_user:
        await call.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    role_name = check_role_name_by_id(db_user.role_id)
    if role_name == 'OWNER':
        await call.answer("–ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å —Ä–æ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞", show_alert=True)
        return

    admin_role_id = get_role_id_by_name('ADMIN')
    set_role(user_id, admin_role_id)

    user_info = await call.message.bot.get_chat(user_id)
    await call.message.edit_text(
        f'‚úÖ –†–æ–ª—å –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_info.first_name}',
        reply_markup=back(f'check-user_{user_id}')
    )
    try:
        await call.message.bot.send_message(
            chat_id=user_id,
            text='‚úÖ –í–∞–º –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ —Ä–æ–ª—å –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê –±–æ—Ç–∞',
            reply_markup=close()
        )
    except Exception:
        pass

    admin_info = await call.message.bot.get_chat(call.from_user.id)
    audit_logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} ({admin_info.first_name}) –Ω–∞–∑–Ω–∞—á–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({user_info.first_name}) –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
    )


# --- –°–Ω—è—Ç–∏–µ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∞
@router.callback_query(F.data.startswith('remove-admin_'), HasPermissionFilter(Permission.ADMINS_MANAGE))
async def process_admin_for_remove(call: CallbackQuery):
    """
    –°–Ω–∏–º–∞–µ—Ç —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_data = call.data[len('remove-admin_'):]
    try:
        user_id = int(user_data)
    except Exception:
        await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    db_user = check_user(user_id)
    if not db_user:
        await call.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    role_name = check_role_name_by_id(db_user.role_id)
    if role_name == 'OWNER':
        await call.answer("–ù–µ–ª—å–∑—è —Å–Ω–∏–º–∞—Ç—å —Ä–æ–ª—å —É –≤–ª–∞–¥–µ–ª—å—Ü–∞", show_alert=True)
        return

    user_role_id = get_role_id_by_name('USER')
    set_role(user_id, user_role_id)

    user_info = await call.message.bot.get_chat(user_id)
    await call.message.edit_text(
        f'‚úÖ –†–æ–ª—å –æ—Ç–æ–∑–≤–∞–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info.first_name}',
        reply_markup=back(f'check-user_{user_id}')
    )
    try:
        await call.message.bot.send_message(
            chat_id=user_id,
            text='‚ùå –£ –≤–∞—Å –æ—Ç–æ–∑–≤–∞–Ω–∞ —Ä–æ–ª—å –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê –±–æ—Ç–∞',
            reply_markup=close()
        )
    except Exception:
        pass

    admin_info = await call.message.bot.get_chat(call.from_user.id)
    audit_logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} ({admin_info.first_name}) –æ—Ç–æ–∑–≤–∞–ª —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({user_info.first_name})"
    )


# --- –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (USERS_MANAGE)
@router.callback_query(F.data.startswith('fill-user-balance_'), HasPermissionFilter(Permission.USERS_MANAGE))
async def replenish_user_balance_callback_handler(call: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_data = call.data[len('fill-user-balance_'):]
    try:
        user_id = int(user_data)
    except Exception:
        await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    await call.message.edit_text(
        'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:',
        reply_markup=back(f'check-user_{user_id}')
    )
    await state.set_state(UserMgmtStates.waiting_user_replenish)
    await state.update_data(target_user=user_id)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (USERS_MANAGE)
@router.message(UserMgmtStates.waiting_user_replenish, F.text)
async def process_replenish_user_balance(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    data = await state.get_data()
    user_id = data.get('target_user')

    if not message.text or not message.text.strip().isdigit():
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. "
            "–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –Ω–µ –º–µ–Ω—å—à–µ 10‚ÇΩ –∏ –Ω–µ –±–æ–ª–µ–µ 10 000‚ÇΩ",
            reply_markup=back(f'check-user_{user_id}')
        )
        return

    amount = int(message.text.strip())
    if not (10 <= amount <= 10000):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. "
            "–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –Ω–µ –º–µ–Ω—å—à–µ 10‚ÇΩ –∏ –Ω–µ –±–æ–ª–µ–µ 10 000‚ÇΩ",
            reply_markup=back(f'check-user_{user_id}')
        )
        return

    create_operation(user_id, amount, datetime.datetime.now())
    update_balance(user_id, amount)

    user_info = await message.bot.get_chat(user_id)
    await message.answer(
        f'‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info.first_name} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ',
        reply_markup=back(f'check-user_{user_id}')
    )
    admin_info = await message.bot.get_chat(message.from_user.id)
    audit_logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} ({admin_info.first_name}) –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({user_info.first_name}) –Ω–∞ {amount}‚ÇΩ"
    )
    try:
        await message.bot.send_message(
            chat_id=user_id,
            text=f'‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ',
            reply_markup=close()
        )
    except Exception:
        pass
    await state.clear()


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è (user_manage_check) ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data.startswith('check-user_'), HasPermissionFilter(permission=Permission.USERS_MANAGE))
async def check_user_profile_again(call: CallbackQuery):
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–Ω–æ–≤–æ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ—Ç user_profile_view).
    """
    await user_profile_view(call)
