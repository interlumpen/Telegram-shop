from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters.state import StatesGroup, State

from bot.database.models import Permission
from bot.database.methods import (
    check_item, add_values_to_item, update_item, check_value, delete_only_items
)
from bot.keyboards.inline import back, question_buttons, simple_buttons
from bot.logger_mesh import audit_logger
from bot.filters import HasPermissionFilter
from bot.misc import TgConfig

router = Router()


class UpdateItemFSM(StatesGroup):
    """
    FSM –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:
    1) –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (values) –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏,
    2) –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (–∏–º—è, –æ–ø–∏—Å–∞–Ω–∏–µ, —Ü–µ–Ω–∞, –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å/–æ–±—ã—á–Ω–∞—è, values).
    """
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∫ –ø–æ–∑–∏—Ü–∏–∏
    waiting_item_name_for_amount_upd = State()
    waiting_item_values_upd = State()

    # –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
    waiting_item_name_for_update = State()
    waiting_item_new_name = State()
    waiting_item_description = State()
    waiting_item_price = State()
    waiting_make_infinity = State()
    waiting_single_value = State()
    waiting_multiple_values = State()


# ==============================
#  –ë–õ–û–ö 1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∫ –ø–æ–∑–∏—Ü–∏–∏
# ==============================

@router.callback_query(F.data == 'update_item_amount', HasPermissionFilter(permission=Permission.SHOP_MANAGE))
async def update_item_amount_callback_handler(call: CallbackQuery, state):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏.
    """
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏', reply_markup=back("goods_management"))
    await state.set_state(UpdateItemFSM.waiting_item_name_for_amount_upd)


@router.message(UpdateItemFSM.waiting_item_name_for_amount_upd, F.text)
async def check_item_name_for_amount_upd(message: Message, state):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —á—Ç–æ –æ–Ω–∞ –ù–ï –±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è.
    –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è ‚Äî values –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ–ª—å–∑—è.
    """
    item_name = message.text.strip()
    item = check_item(item_name)
    if not item:
        await message.answer('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω (—Ç–∞–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)',
                             reply_markup=back('goods_management'))
        return

    # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è, –¥–æ–ø–æ–ª–Ω—è—Ç—å values –ª–æ–≥–∏—á–µ—Å–∫–∏ –Ω–µ–ª—å–∑—è
    if check_value(item_name):
        await message.answer('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω (—É –¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ç–æ–≤–∞—Ä)',
                             reply_markup=back('goods_management'))
        return

    # –ò–Ω–∞—á–µ –Ω–∞—á–∏–Ω–∞–µ–º –∫–æ–ø–∏—Ç—å values
    await state.update_data(item_name=item_name)
    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.\n'
        '–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤–≤–æ–¥ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–î–æ–±–∞–≤–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã¬ª.',
        reply_markup=back("goods_management")
    )
    await state.set_state(UpdateItemFSM.waiting_item_values_upd)


@router.message(UpdateItemFSM.waiting_item_values_upd, F.text)
async def updating_item_values(message: Message, state):
    """
    –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º values –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ (–æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º).
    –ö–Ω–æ–ø–∫–∞ ‚Äú–ó–∞–≤–µ—Ä—à–∏—Ç—å‚Äù –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.
    """
    data = await state.get_data()
    values = data.get('item_values', [])
    values.append(message.text)
    await state.update_data(item_values=values)

    await message.answer(
        f'‚úÖ –¢–æ–≤–∞—Ä ¬´{message.text}¬ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ ({len(values)} —à—Ç.)',
        reply_markup=simple_buttons([
            ("–î–æ–±–∞–≤–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", "finish_updating_items"),
            ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "goods_management")
        ], per_row=1)
    )


@router.callback_query(F.data == 'finish_updating_items', UpdateItemFSM.waiting_item_values_upd)
async def updating_item_amount(call: CallbackQuery, state):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (values) –∫ –ø–æ–∑–∏—Ü–∏–∏.
    """
    data = await state.get_data()
    item_name = data.get('item_name')
    raw_values: list[str] = data.get("item_values", []) or []

    added = 0
    skipped_db_dup = 0
    skipped_batch_dup = 0
    skipped_invalid = 0
    seen_in_batch: set[str] = set()

    for v in raw_values:
        v_norm = (v or "").strip()
        if not v_norm:
            skipped_invalid += 1
            continue

        # –î—É–±–ª–∏–∫–∞—Ç –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–π –ø–∞—á–∫–∏
        if v_norm in seen_in_batch:
            skipped_batch_dup += 1
            continue
        seen_in_batch.add(v_norm)

        # –ü—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç–∞–≤–∏—Ç—å ‚Äî False –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ç–∞–∫–æ–µ —É–∂–µ –µ—Å—Ç—å –≤ –ë–î
        if add_values_to_item(item_name, v_norm, False):
            added += 1
        else:
            skipped_db_dup += 1

    text_lines = [f"‚úÖ –¢–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã", f"üì¶ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <b>{added}</b>"]
    if skipped_db_dup:
        text_lines.append(f"‚Ü©Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –±—ã–ª–∏ –≤ –ë–î): <b>{skipped_db_dup}</b>")
    if skipped_batch_dup:
        text_lines.append(f"üîÅ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª—å –≤ –≤–≤–æ–¥–µ): <b>{skipped_batch_dup}</b>")
    if skipped_invalid:
        text_lines.append(f"üö´ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–ø—É—Å—Ç—ã–µ/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ): <b>{skipped_invalid}</b>")

    await call.message.edit_text("\n".join(text_lines), parse_mode="HTML", reply_markup=back('goods_management'))

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
    group_id = TgConfig.GROUP_ID if getattr(TgConfig, "GROUP_ID", None) not in (None, -988765433) else None
    if group_id:
        try:
            await call.message.bot.send_message(
                chat_id=group_id,
                text=(f'üéÅ –ó–∞–ª–∏–≤\n'
                      f'üè∑Ô∏è –¢–æ–≤–∞—Ä: <b>{item_name}</b>\n'
                      f'üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{added}</b>'),
                parse_mode='HTML'
            )
        except Exception:
            # –ù–µ –º–µ—à–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏—é, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
            pass

    admin_info = await call.message.bot.get_chat(call.from_user.id)
    audit_logger.info(
        f'–ê–¥–º–∏–Ω {call.from_user.id} ({admin_info.first_name}) –¥–æ–±–∞–≤–∏–ª –∫ –ø–æ–∑–∏—Ü–∏–∏ "{item_name}" {added} —à—Ç.')
    await state.clear()


# ==============================
#  –ë–õ–û–ö 2. –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
# ==============================

@router.callback_query(F.data == 'update_item', HasPermissionFilter(permission=Permission.SHOP_MANAGE))
async def update_item_callback_handler(call: CallbackQuery, state):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏.
    """
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏', reply_markup=back("goods_management"))
    await state.set_state(UpdateItemFSM.waiting_item_name_for_update)


@router.message(UpdateItemFSM.waiting_item_name_for_update, F.text)
async def check_item_name_for_update(message: Message, state):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏. –ï—Å–ª–∏ –µ—Å—Ç—å ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è.
    """
    item_name = message.text.strip()
    item = check_item(item_name)
    if not item:
        await message.answer('‚ùå –ü–æ–∑–∏—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ (—Ç–∞–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)',
                             reply_markup=back('goods_management'))
        return

    await state.update_data(item_old_name=item_name, item_category=item['category_name'])
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏:', reply_markup=back('goods_management'))
    await state.set_state(UpdateItemFSM.waiting_item_new_name)


@router.message(UpdateItemFSM.waiting_item_new_name, F.text)
async def update_item_name(message: Message, state):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏.
    """
    await state.update_data(item_new_name=message.text.strip())
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏:', reply_markup=back('goods_management'))
    await state.set_state(UpdateItemFSM.waiting_item_description)


@router.message(UpdateItemFSM.waiting_item_description, F.text)
async def update_item_description(message: Message, state):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É –ø–æ–∑–∏—Ü–∏–∏.
    """
    await state.update_data(item_description=message.text.strip())
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ (—á–∏—Å–ª–æ –≤ ‚ÇΩ):', reply_markup=back('goods_management'))
    await state.set_state(UpdateItemFSM.waiting_item_price)


@router.message(UpdateItemFSM.waiting_item_price, F.text)
async def update_item_price(message: Message, state):
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ü–µ–Ω—É. –ó–∞—Ç–µ–º —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —Ä–µ–∂–∏–º ‚Äú–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å‚Äù.
    """
    price_text = message.text.strip()
    if not price_text.isdigit():
        await message.answer('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.', reply_markup=back('goods_management'))
        return

    await state.update_data(item_price=int(price_text))
    data = await state.get_data()
    item_old_name = data.get('item_old_name')

    # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —Å–µ–π—á–∞—Å –ù–ï –±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è ‚Äî —Å–ø—Ä–æ—Å–∏–º, —Å–¥–µ–ª–∞—Ç—å –ª–∏ –µ—ë –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π
    if not check_value(item_old_name):
        await message.answer(
            '–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º–∏?',
            reply_markup=question_buttons('change_make_infinity', 'goods_management')
        )
    else:
        # –∏–Ω–∞—á–µ ‚Äî —Å–ø—Ä–æ—Å–∏–º, –æ—Ç–º–µ–Ω–∏—Ç—å –ª–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å
        await message.answer(
            '–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã?',
            reply_markup=question_buttons('change_deny_infinity', 'goods_management')
        )
    await state.set_state(UpdateItemFSM.waiting_make_infinity)


@router.callback_query(F.data.startswith('change_'), UpdateItemFSM.waiting_make_infinity)
async def update_item_process(call: CallbackQuery, state):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –ø–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏:
    - change_*_no   -> –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è values,
    - change_make_* -> –∂–¥—ë–º –û–î–ù–û –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é,
    - change_deny_* -> –∂–¥—ë–º —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –≤ –æ–±—ã—á–Ω—É—é.
    """
    parts = call.data.split('_')
    # –û–∂–∏–¥–∞–µ–º—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: change_make_infinity_yes/no, change_deny_infinity_yes/no
    decision_scope = parts[1]  # make / deny
    decision_yesno = parts[3]  # yes / no

    data = await state.get_data()
    item_old_name = data.get('item_old_name')
    item_new_name = data.get('item_new_name')
    item_description = data.get('item_description')
    category = data.get('item_category')
    price = data.get('item_price')

    if decision_yesno == 'no':
        # –ù–µ –º–µ–Ω—è–µ–º —Ç–∏–ø (–æ—Å—Ç–∞—Ç–∫–∏/–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å), –ø—Ä–æ—Å—Ç–æ –∞–ø–¥–µ–π—Ç–∏–º –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ
        update_item(item_old_name, item_new_name, item_description, price, category)
        await call.message.edit_text('‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞', reply_markup=back('goods_management'))
        admin_info = await call.message.bot.get_chat(call.from_user.id)
        audit_logger.info(
            f'–ê–¥–º–∏–Ω {call.from_user.id} ({admin_info.first_name}) –æ–±–Ω–æ–≤–∏–ª –ø–æ–∑–∏—Ü–∏—é "{item_old_name}" ‚Üí "{item_new_name}"')
        await state.clear()
        return

    # decision_yesno == 'yes'
    if decision_scope == 'make':
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∂–∏–º: –∂–¥—ë–º –û–î–ù–û –∑–Ω–∞—á–µ–Ω–∏–µ
        await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏:', reply_markup=back('goods_management'))
        await state.set_state(UpdateItemFSM.waiting_single_value)
    else:
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: —Å–æ–±–∏—Ä–∞–µ–º –ú–ù–û–ñ–ï–°–¢–í–û values
        await call.message.edit_text(
            '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.\n'
            '–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤–≤–æ–¥ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–î–æ–±–∞–≤–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã¬ª.',
            reply_markup=back("goods_management")
        )
        await state.set_state(UpdateItemFSM.waiting_multiple_values)


@router.message(UpdateItemFSM.waiting_single_value, F.text)
async def update_item_infinity(message: Message, state):
    """
    –ü–µ—Ä–µ–≤–æ–¥ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∂–∏–º:
    - –æ—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ values,
    - –¥–æ–±–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ is_infinity=True,
    - –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏.
    """
    data = await state.get_data()
    item_old_name = data.get('item_old_name')
    item_new_name = data.get('item_new_name')
    item_description = data.get('item_description')
    category = data.get('item_category')
    price = data.get('item_price')
    value = message.text

    # –ß–∏—Å—Ç–∏–º values –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º "–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ" –∑–Ω–∞—á–µ–Ω–∏–µ
    delete_only_items(item_old_name)
    add_values_to_item(item_old_name, value, True)
    update_item(item_old_name, item_new_name, item_description, price, category)

    await message.answer('‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞', reply_markup=back('goods_management'))
    admin_info = await message.bot.get_chat(message.from_user.id)
    audit_logger.info(
        f'–ê–¥–º–∏–Ω {message.from_user.id} ({admin_info.first_name}) –æ–±–Ω–æ–≤–∏–ª –ø–æ–∑–∏—Ü–∏—é "{item_old_name}" ‚Üí "{item_new_name}"')
    await state.clear()


@router.message(UpdateItemFSM.waiting_multiple_values, F.text)
async def updating_item(message: Message, state):
    """
    –ü–µ—Ä–µ–≤–æ–¥ –≤ –æ–±—ã—á–Ω—ã–π (–Ω–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π) —Ä–µ–∂–∏–º:
    - –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è,
    - –∑–∞—Ç–µ–º –∫–Ω–æ–ø–∫–æ–π ‚Äú–ó–∞–≤–µ—Ä—à–∏—Ç—å‚Äù –ø—Ä–∏–º–µ–Ω–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è.
    """
    data = await state.get_data()
    values = data.get('item_values', [])
    values.append(message.text)
    await state.update_data(item_values=values)

    await message.answer(
        f'‚úÖ –¢–æ–≤–∞—Ä ¬´{message.text}¬ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ ({len(values)} —à—Ç.)',
        reply_markup=simple_buttons([
            ("–î–æ–±–∞–≤–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", "finish_update_item"),
            ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "goods_management")
        ], per_row=1)
    )


@router.callback_query(F.data == 'finish_update_item', UpdateItemFSM.waiting_multiple_values)
async def update_item_no_infinity(call: CallbackQuery, state):
    """
    –§–∏–Ω–∞–ª –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º:
    - –æ—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ values,
    - –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è is_infinity=False,
    - –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏.
    """
    data = await state.get_data()
    item_old_name = data.get('item_old_name')
    item_new_name = data.get('item_new_name')
    item_description = data.get('item_description')
    category = data.get('item_category')
    price = data.get('item_price')
    raw_values: list[str] = data.get("item_values", []) or []

    added = 0
    skipped_db_dup = 0
    skipped_batch_dup = 0
    skipped_invalid = 0
    seen_in_batch: set[str] = set()

    delete_only_items(item_old_name)

    for v in raw_values:
        v_norm = (v or "").strip()
        if not v_norm:
            skipped_invalid += 1
            continue

        # –î—É–±–ª–∏–∫–∞—Ç –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–π –ø–∞—á–∫–∏
        if v_norm in seen_in_batch:
            skipped_batch_dup += 1
            continue
        seen_in_batch.add(v_norm)

        # –ü—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç–∞–≤–∏—Ç—å ‚Äî False –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ç–∞–∫–æ–µ —É–∂–µ –µ—Å—Ç—å –≤ –ë–î
        if add_values_to_item(item_old_name, v_norm, False):
            added += 1
        else:
            skipped_db_dup += 1

    text_lines = [f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞", f"üì¶ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <b>{added}</b>"]
    if skipped_db_dup:
        text_lines.append(f"‚Ü©Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –±—ã–ª–∏ –≤ –ë–î): <b>{skipped_db_dup}</b>")
    if skipped_batch_dup:
        text_lines.append(f"üîÅ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª—å –≤ –≤–≤–æ–¥–µ): <b>{skipped_batch_dup}</b>")
    if skipped_invalid:
        text_lines.append(f"üö´ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–ø—É—Å—Ç—ã–µ/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ): <b>{skipped_invalid}</b>")

    update_item(item_old_name, item_new_name, item_description, price, category)

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
    group_id = TgConfig.GROUP_ID if getattr(TgConfig, "GROUP_ID", None) not in (None, -988765433) else None
    if group_id:
        try:
            await call.message.bot.send_message(
                chat_id=group_id,
                text=(f'üéÅ –ó–∞–ª–∏–≤\n'
                      f'üè∑Ô∏è –¢–æ–≤–∞—Ä: <b>{item_new_name}</b>\n'
                      f'üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{added}</b>'),
                parse_mode='HTML'
            )
        except Exception:
            # –ù–µ –º–µ—à–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏—é, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
            pass

    await call.message.edit_text("\n".join(text_lines), parse_mode="HTML", reply_markup=back('goods_management'))
    admin_info = await call.message.bot.get_chat(call.from_user.id)
    audit_logger.info(
        f'–ê–¥–º–∏–Ω {call.from_user.id} ({admin_info.first_name}) –æ–±–Ω–æ–≤–∏–ª –ø–æ–∑–∏—Ü–∏—é "{item_old_name}" ‚Üí "{item_new_name}"')
    await state.clear()
