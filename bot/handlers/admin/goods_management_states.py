from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters.state import StatesGroup, State

from bot.database.models import Permission
from bot.database.methods import (
    check_item, delete_item, select_items, get_item_info,
    get_goods_info, delete_item_from_position
)
from bot.keyboards.inline import (
    back, paginated_keyboard, simple_buttons
)
from bot.logger_mesh import audit_logger
from bot.filters import HasPermissionFilter

router = Router()


class GoodsFSM(StatesGroup):
    """FSM –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏."""
    waiting_item_name_delete = State()
    waiting_item_name_show = State()


# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏ (SHOP_MANAGE)
@router.callback_query(F.data == 'goods_management', HasPermissionFilter(permission=Permission.SHOP_MANAGE))
async def goods_management_callback_handler(call: CallbackQuery):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏ (—Ç–æ–≤–∞—Ä–∞–º–∏).
    """
    actions = [
        ("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", "add_item"),
        ("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –ø–æ–∑–∏—Ü–∏—é", "update_item_amount"),
        ("üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", "update_item"),
        ("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", "delete_item"),
        ("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –ø–æ–∑–∏—Ü–∏–∏", "show__items_in_position"),
        ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "console")
    ]
    markup = simple_buttons(actions, per_row=1)
    await call.message.edit_text('‚õ©Ô∏è –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏', reply_markup=markup)


# --- –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ (SHOP_MANAGE)
@router.callback_query(F.data == 'delete_item', HasPermissionFilter(permission=Permission.SHOP_MANAGE))
async def delete_item_callback_handler(call: CallbackQuery, state):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    """
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏', reply_markup=back("goods_management"))
    await state.set_state(GoodsFSM.waiting_item_name_delete)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (SHOP_MANAGE)
@router.message(GoodsFSM.waiting_item_name_delete, F.text)
async def delete_str_item(message: Message, state):
    """
    –£–¥–∞–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é.
    """
    item_name = message.text
    item = check_item(item_name)
    if not item:
        await message.answer(
            '‚ùå –ü–æ–∑–∏—Ü–∏—è –Ω–µ —É–¥–∞–ª–µ–Ω–∞ (–¢–∞–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)',
            reply_markup=back('goods_management')
        )
    else:
        delete_item(item_name)
        await message.answer(
            '‚úÖ –ü–æ–∑–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞',
            reply_markup=back('goods_management')
        )
        admin_info = await message.bot.get_chat(message.from_user.id)
        audit_logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} ({admin_info.first_name}) —É–¥–∞–ª–∏–ª –ø–æ–∑–∏—Ü–∏—é \"{item_name}\""
        )
    await state.clear()


# --- –ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–æ–∑–∏—Ü–∏–∏ (SHOP_MANAGE)
@router.callback_query(F.data == 'show__items_in_position', HasPermissionFilter(permission=Permission.SHOP_MANAGE))
async def show_items_callback_handler(call: CallbackQuery, state):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ –µ—ë —Ç–æ–≤–∞—Ä–æ–≤.
    """
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏', reply_markup=back("goods_management"))
    await state.set_state(GoodsFSM.waiting_item_name_show)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ (SHOP_MANAGE)
@router.message(GoodsFSM.waiting_item_name_show, F.text)
async def show_str_item(message: Message, state):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π).
    """
    item_name = message.text.strip()
    item = check_item(item_name)
    if not item:
        await message.answer(
            '‚ùå –¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç (–¢–∞–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)',
            reply_markup=back('goods_management')
        )
        await state.clear()
        return

    goods = select_items(item_name)  # list[int]
    if not goods:
        await message.answer(
            '‚ÑπÔ∏è –í —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.',
            reply_markup=back('goods_management')
        )
        await state.clear()
        return

    markup = paginated_keyboard(
        items=goods,
        item_text=lambda g: str(g),
        item_callback=lambda g: f"show-item_{g}_{item_name}_goods-in-item-page_{item_name}_0",
        page=0,
        per_page=10,
        back_cb="goods_management",
        nav_cb_prefix=f"goods-in-item-page_{item_name}_"
    )
    await message.answer('–¢–æ–≤–∞—Ä—ã –≤ –ø–æ–∑–∏—Ü–∏–∏:', reply_markup=markup)
    await state.clear()


# --- –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤–Ω—É—Ç—Ä–∏ –ø–æ–∑–∏—Ü–∏–∏ (SHOP_MANAGE)
@router.callback_query(F.data.startswith('goods-in-item-page_'), HasPermissionFilter(permission=Permission.SHOP_MANAGE))
async def navigate_items_in_goods(call: CallbackQuery):
    """
    –õ–∏—Å—Ç–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤–Ω—É—Ç—Ä–∏ –ø–æ–∑–∏—Ü–∏–∏.
    –§–æ—Ä–º–∞—Ç callback_data: goods-in-item-page_{item_name}_{page}
    """
    payload = call.data[len('goods-in-item-page_'):]
    try:
        item_name, page_str = payload.rsplit('_', 1)
        current_index = int(page_str)
    except ValueError:
        item_name, current_index = payload, 0

    goods = select_items(item_name)
    if not goods:
        await call.message.edit_text('‚ÑπÔ∏è –í —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.', reply_markup=back('goods_management'))
        return

    per_page = 10
    max_page = max((len(goods) - 1) // per_page, 0)
    current_index = max(0, min(current_index, max_page))

    markup = paginated_keyboard(
        items=goods,
        item_text=lambda g: str(g),
        item_callback=lambda g: f"show-item_{g}_{item_name}_goods-in-item-page_{item_name}_{current_index}",
        page=current_index,
        per_page=per_page,
        back_cb="goods_management",
        nav_cb_prefix=f"goods-in-item-page_{item_name}_"
    )
    await call.message.edit_text('–¢–æ–≤–∞—Ä—ã –≤ –ø–æ–∑–∏—Ü–∏–∏:', reply_markup=markup)


# --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ (SHOP_MANAGE)
@router.callback_query(F.data.startswith('show-item_'), HasPermissionFilter(permission=Permission.SHOP_MANAGE))
async def item_info_callback_handler(call: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ (–≤–Ω—É—Ç—Ä–∏ –ø–æ–∑–∏—Ü–∏–∏).
    –§–æ—Ä–º–∞—Ç callback_data:
      show-item_{id}_{item_name}_goods-in-item-page_{item_name}_{page}
    """
    payload = call.data[len('show-item_'):]  # "{id}_{item_name}_goods-in-item-page_{item_name}_{page}"

    # 1) –æ—Ç–¥–µ–ª—è–µ–º id –æ—Ç –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ
    first_sep = payload.find('_')
    if first_sep == -1:
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    item_id_str = payload[:first_sep]
    rest = payload[first_sep + 1:]

    # 2) –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å back_data
    marker = 'goods-in-item-page_'
    back_data = 'goods_management'
    idx = rest.find(marker)
    if idx != -1:
        back_data = rest[idx:]

    # 3) –≥—Ä—É–∑–∏–º –¥–∞–Ω–Ω—ã–µ
    try:
        item_id = int(item_id_str)
    except ValueError:
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞", show_alert=True)
        return

    item_info = get_goods_info(item_id)
    if not item_info:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    position_info = get_item_info(item_info["item_name"])

    actions = [
        ("‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", f"delete-item-from-position_{item_id}_{back_data}"),
        ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", back_data),
    ]
    markup = simple_buttons(actions, per_row=1)

    await call.message.edit_text(
        f'<b>–ü–æ–∑–∏—Ü–∏—è</b>: <code>{item_info["item_name"]}</code>\n'
        f'<b>–¶–µ–Ω–∞</b>: <code>{position_info["price"]}</code>‚ÇΩ\n'
        f'<b>–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID</b>: <code>{item_info["id"]}</code>\n'
        f'<b>–¢–æ–≤–∞—Ä</b>:\n<code>{item_info["value"]}</code>',
        parse_mode='HTML',
        reply_markup=markup
    )


# --- –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ (SHOP_MANAGE)
@router.callback_query(
    F.data.startswith('delete-item-from-position_'),
    HasPermissionFilter(permission=Permission.SHOP_MANAGE)
)
async def process_delete_item_from_position(call: CallbackQuery):
    """
    –§–æ—Ä–º–∞—Ç callback_data: delete-item-from-position_{id}_{back_data}
    –≥–¥–µ back_data = goods-in-item-page_{item_name}_{page}
    """
    payload = call.data[len('delete-item-from-position_'):]  # "{id}_{back_data}"
    try:
        item_id_str, back_data = payload.split('_', 1)
        item_id = int(item_id_str)
    except ValueError:
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    item_info = get_goods_info(item_id)
    if not item_info:
        await call.answer("–¢–æ–≤–∞—Ä —É–∂–µ —É–¥–∞–ª—ë–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        await call.message.edit_text("–¢–æ–≤–∞—Ä—ã –≤ –ø–æ–∑–∏—Ü–∏–∏:", reply_markup=back(back_data))
        return

    position_name = item_info["item_name"]
    delete_item_from_position(item_id)

    # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º, –µ—Å–ª–∏ –Ω–∞–¥–æ
    if back_data.startswith("goods-in-item-page_"):
        try:
            _, rest = back_data.split("goods-in-item-page_", 1)
            item_name, page_str = rest.rsplit("_", 1)
            page = int(page_str)
        except Exception:
            await call.message.edit_text('‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω', reply_markup=back(back_data))
            return

        goods = select_items(item_name)
        if not goods:
            await call.message.edit_text('‚ÑπÔ∏è –í —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.', reply_markup=back("goods_management"))
        else:
            per_page = 10
            max_page = max((len(goods) - 1) // per_page, 0)
            page = max(0, min(page, max_page))
            markup = paginated_keyboard(
                items=goods,
                item_text=lambda g: str(g),
                item_callback=lambda g: f"show-item_{g}_{item_name}_goods-in-item-page_{item_name}_{page}",
                page=page,
                per_page=per_page,
                back_cb="goods_management",
                nav_cb_prefix=f"goods-in-item-page_{item_name}_"
            )
            await call.message.edit_text('‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω\n\n–¢–æ–≤–∞—Ä—ã –≤ –ø–æ–∑–∏—Ü–∏–∏:', reply_markup=markup)
    else:
        await call.message.edit_text('‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω', reply_markup=back(back_data))

    admin_info = await call.message.bot.get_chat(call.from_user.id)
    audit_logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} ({admin_info.first_name}) —É–¥–∞–ª–∏–ª —Ç–æ–≤–∞—Ä —Å id={item_id} –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ {position_name or '<?>'}"
    )
