from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters.state import StatesGroup, State

from bot.database.models import Permission
from bot.database.methods import (
    check_category, check_item, create_item, add_values_to_item
)
from bot.keyboards.inline import back, question_buttons, simple_buttons
from bot.logger_mesh import audit_logger
from bot.filters import HasPermissionFilter
from bot.misc import TgConfig

router = Router()


class AddItemFSM(StatesGroup):
    """
    FSM –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ (—Ç–æ–≤–∞—Ä–∞):
    1) –∏–º—è,
    2) –æ–ø–∏—Å–∞–Ω–∏–µ,
    3) —Ü–µ–Ω–∞,
    4) –∫–∞—Ç–µ–≥–æ—Ä–∏—è,
    5) —Ä–µ–∂–∏–º (–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –∏–ª–∏ –Ω–µ—Ç),
    6) –≤–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞ (–æ–¥–Ω–æ / –º–Ω–æ–≥–æ).
    """
    waiting_item_name = State()
    waiting_item_description = State()
    waiting_item_price = State()
    waiting_category = State()
    waiting_infinity = State()
    waiting_values = State()
    waiting_single_value = State()


# --- –°—Ç–∞—Ä—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ (—Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ SHOP_MANAGE)
@router.callback_query(F.data == 'add_item', HasPermissionFilter(permission=Permission.SHOP_MANAGE))
async def add_item_callback_handler(call: CallbackQuery, state):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–º—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏.
    """
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏', reply_markup=back("goods_management"))
    await state.set_state(AddItemFSM.waiting_item_name)


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏ (–Ω–µ –¥–æ–ª–∂–Ω–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å)
@router.message(AddItemFSM.waiting_item_name, F.text)
async def check_item_name_for_add(message: Message, state):
    """
    –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî —Å–æ–æ–±—â–∞–µ–º; –∏–Ω–∞—á–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –ø—Ä–æ—Å–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ.
    """
    item_name = message.text.strip()
    item = check_item(item_name)
    if item:
        await message.answer(
            '‚ùå –ü–æ–∑–∏—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ (—Ç–∞–∫–∞—è –ø–æ–∑–∏—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)',
            reply_markup=back('goods_management')
        )
        return

    await state.update_data(item_name=item_name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏:', reply_markup=back('goods_management'))
    await state.set_state(AddItemFSM.waiting_item_description)


# --- –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
@router.message(AddItemFSM.waiting_item_description, F.text)
async def add_item_description(message: Message, state):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ü–µ–Ω–µ.
    """
    await state.update_data(item_description=message.text.strip())
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ (—á–∏—Å–ª–æ –≤ ‚ÇΩ):', reply_markup=back('goods_management'))
    await state.set_state(AddItemFSM.waiting_item_price)


# --- –í–≤–æ–¥ —Ü–µ–Ω—ã
@router.message(AddItemFSM.waiting_item_price, F.text)
async def add_item_price(message: Message, state):
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ü–µ–Ω—É –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é.
    """
    price_text = message.text.strip()
    if not price_text.isdigit():
        await message.answer('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.', reply_markup=back('goods_management'))
        return

    await state.update_data(item_price=int(price_text))
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –ø–æ–∑–∏—Ü–∏—è:',
                         reply_markup=back('goods_management'))
    await state.set_state(AddItemFSM.waiting_category)


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.message(AddItemFSM.waiting_category, F.text)
async def check_category_for_add_item(message: Message, state):
    """
    –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å; –∑–∞—Ç–µ–º —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞.
    """
    category_name = message.text.strip()
    category = check_category(category_name)
    if not category:
        await message.answer(
            '‚ùå –ü–æ–∑–∏—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ)',
            reply_markup=back('goods_management')
        )
        return

    await state.update_data(item_category=category_name)
    await message.answer(
        '–£ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –±—É–¥—É—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã? (–≤—Å–µ–º –±—É–¥–µ—Ç –≤—ã—Å—ã–ª–∞—Ç—å—Å—è –æ–¥–Ω–∞ –∫–æ–ø–∏—è –∑–Ω–∞—á–µ–Ω–∏—è)',
        reply_markup=question_buttons('infinity', 'goods_management')
    )
    await state.set_state(AddItemFSM.waiting_infinity)


# --- –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞: –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã / –∫–æ–Ω–µ—á–Ω—ã–µ
@router.callback_query(F.data.startswith('infinity_'), AddItemFSM.waiting_infinity)
async def adding_value_to_position(call: CallbackQuery, state):
    """
    –ï—Å–ª–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ ‚Äî –∂–¥—ë–º –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ.
    –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
    """
    answer = call.data.split('_')[1]
    await state.update_data(is_infinity=(answer == 'yes'))

    if answer == 'no':
        # –ö–Ω–æ–ø–∫–∞ ‚Äú–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ‚Äù –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        await call.message.edit_text(
            '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.\n'
            '–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤–≤–æ–¥ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–î–æ–±–∞–≤–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã¬ª.',
            reply_markup=back("goods_management")
        )
        await state.set_state(AddItemFSM.waiting_values)
    else:
        await call.message.edit_text(
            '–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏:',
            reply_markup=back('goods_management')
        )
        await state.set_state(AddItemFSM.waiting_single_value)


# --- –°–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏–π (–ù–ï –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∂–∏–º)
@router.message(AddItemFSM.waiting_values, F.text)
async def collect_item_value(message: Message, state):
    """
    –ö–æ–ø–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ ‚Äî –¥–∞—ë–º –∫–Ω–æ–ø–∫—É ‚Äú–ó–∞–≤–µ—Ä—à–∏—Ç—å‚Äù.
    """
    data = await state.get_data()
    values = data.get('item_values', [])
    values.append(message.text)
    await state.update_data(item_values=values)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –∫–Ω–æ–ø–∫—É ‚Äú–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ‚Äù
    await message.answer(
        f'‚úÖ –¢–æ–≤–∞—Ä ¬´{message.text}¬ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ ({len(values)} —à—Ç.)',
        reply_markup=simple_buttons([
            ("–î–æ–±–∞–≤–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", "finish_adding_items"),
            ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "goods_management")
        ], per_row=1)
    )


# --- –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–ù–ï –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∂–∏–º)
@router.callback_query(F.data == 'finish_adding_items', AddItemFSM.waiting_values)
async def finish_adding_items_callback_handler(call: CallbackQuery, state):
    """
    –°–æ–∑–¥–∞—ë–º –ø–æ–∑–∏—Ü–∏—é, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —É–≤–µ–¥–æ–º–ª—è–µ–º –≥—Ä—É–ø–ø—É (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞).
    """
    data = await state.get_data()
    item_name = data.get('item_name')
    item_description = data.get('item_description')
    item_price = data.get('item_price')
    category_name = data.get('item_category')
    raw_values: list[str] = data.get("item_values", []) or []

    added = 0
    skipped_db_dup = 0
    skipped_batch_dup = 0
    skipped_invalid = 0
    seen_in_batch: set[str] = set()

    # —Å–æ–∑–¥–∞—ë–º –ø–æ–∑–∏—Ü–∏—é
    create_item(item_name, item_description, item_price, category_name)

    for v in raw_values:
        v_norm = (v or "").strip()
        if not v_norm:
            skipped_invalid += 1
            continue

        # –î—É–±–ª–∏–∫–∞—Ç –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–π –ø–∞—á–∫–∏
        if v_norm in seen_in_batch:
            skipped_batch_dup += 1
            continue
        seen_in_batch.add(v_norm)

        # –ü—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç–∞–≤–∏—Ç—å ‚Äî False –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ç–∞–∫–æ–µ —É–∂–µ –µ—Å—Ç—å –≤ –ë–î
        if add_values_to_item(item_name, v_norm, False):
            added += 1
        else:
            skipped_db_dup += 1

    text_lines = [f"‚úÖ –ü–æ–∑–∏—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞.", f"üì¶ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <b>{added}</b>"]
    if skipped_db_dup:
        text_lines.append(f"‚Ü©Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –±—ã–ª–∏ –≤ –ë–î): <b>{skipped_db_dup}</b>")
    if skipped_batch_dup:
        text_lines.append(f"üîÅ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª—å –≤ –≤–≤–æ–¥–µ): <b>{skipped_batch_dup}</b>")
    if skipped_invalid:
        text_lines.append(f"üö´ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–ø—É—Å—Ç—ã–µ/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ): <b>{skipped_invalid}</b>")

    await call.message.edit_text("\n".join(text_lines), parse_mode="HTML", reply_markup=back("goods_management"))

    # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –≥—Ä—É–ø–ø—É
    group_id = TgConfig.GROUP_ID if TgConfig.GROUP_ID != -988765433 else None
    if group_id:
        try:
            await call.message.bot.send_message(
                chat_id=group_id,
                text=(
                    f'üéÅ –ó–∞–ª–∏–≤\n'
                    f'üè∑Ô∏è –¢–æ–≤–∞—Ä: <b>{item_name}</b>\n'
                    f'üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{added}</b>'
                ),
                parse_mode='HTML'
            )
        except Exception:
            pass

    admin_info = await call.message.bot.get_chat(call.from_user.id)
    audit_logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} ({admin_info.first_name}) —Å–æ–∑–¥–∞–ª –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é \"{item_name}\"")
    await state.clear()


# --- –í–≤–æ–¥ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∂–∏–º)
@router.message(AddItemFSM.waiting_single_value, F.text)
async def finish_adding_item_callback_handler(message: Message, state):
    """
    –°–æ–∑–¥–∞—ë–º –ø–æ–∑–∏—Ü–∏—é –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω–æ ‚Äú–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ‚Äù –∑–Ω–∞—á–µ–Ω–∏–µ. –£–≤–µ–¥–æ–º–ª—è–µ–º –≥—Ä—É–ø–ø—É (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞).
    """
    data = await state.get_data()
    item_name = data.get('item_name')
    item_description = data.get('item_description')
    item_price = data.get('item_price')
    category_name = data.get('item_category')

    single_value = message.text.strip()
    if not single_value:
        await message.answer('‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.', reply_markup=back('goods_management'))
        return

    # 1) —Å–æ–∑–¥–∞—ë–º –ø–æ–∑–∏—Ü–∏—é
    create_item(item_name, item_description, item_price, category_name)
    # 2) –¥–æ–±–∞–≤–ª—è–µ–º 1 ¬´–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ¬ª –∑–Ω–∞—á–µ–Ω–∏–µ
    add_values_to_item(item_name, single_value, True)

    # 3) –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –≥—Ä—É–ø–ø—É
    group_id = TgConfig.GROUP_ID if TgConfig.GROUP_ID != -988765433 else None
    if group_id:
        try:
            await message.bot.send_message(
                chat_id=group_id,
                text=(
                    f'üéÅ –ó–∞–ª–∏–≤\n'
                    f'üè∑Ô∏è –¢–æ–≤–∞—Ä: <b>{item_name}</b>\n'
                    f'üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>‚àû</b>'
                ),
                parse_mode='HTML'
            )
        except Exception:
            pass

    await message.answer('‚úÖ –ü–æ–∑–∏—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞, –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ', reply_markup=back('goods_management'))
    admin_info = await message.bot.get_chat(message.from_user.id)
    audit_logger.info(
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} ({admin_info.first_name}) '
        f'—Å–æ–∑–¥–∞–ª –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é –ø–æ–∑–∏—Ü–∏—é "{item_name}"'
    )
    await state.clear()
