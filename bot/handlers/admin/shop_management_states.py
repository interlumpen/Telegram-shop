import datetime
import os

from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery

from bot.database.methods import check_role, select_today_users, select_admins, get_user_count, select_today_orders, \
    select_all_orders, select_today_operations, select_users_balance, select_all_operations, select_count_items, \
    select_count_goods, select_count_categories, select_count_bought_items, select_bought_item, get_all_admins, \
    get_all_users, check_user, check_user_referrals, check_role_name_by_id, select_user_items, select_user_operations
from bot.database.models import Permission
from bot.handlers.other import get_bot_user_ids
from bot.keyboards import shop_management, back, users_list, statistic_buttons
from bot.misc import TgConfig


async def shop_callback_handler(call: CallbackQuery):
    bot, user_id = await get_bot_user_ids(call)
    TgConfig.STATE[user_id] = None
    role = check_role(user_id)
    if role >= Permission.SHOP_MANAGE:
        await bot.edit_message_text('‚õ©Ô∏è –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º',
                                    chat_id=call.message.chat.id,
                                    message_id=call.message.message_id,
                                    reply_markup=shop_management())
        return
    await call.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')


async def logs_callback_handler(call: CallbackQuery):
    bot, user_id = await get_bot_user_ids(call)
    TgConfig.STATE[user_id] = None
    role = check_role(user_id)
    file_path = 'bot.log'
    if role >= Permission.SHOP_MANAGE:
        if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
            with open(file_path, 'rb') as document:
                await bot.send_document(chat_id=call.message.chat.id,
                                        document=document)
                return
        else:
            await call.answer(text="‚ùóÔ∏è –õ–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
            return
    await call.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')


async def statistics_callback_handler(call: CallbackQuery):
    bot, user_id = await get_bot_user_ids(call)
    TgConfig.STATE[user_id] = None
    role = check_role(user_id)
    if role >= Permission.SHOP_MANAGE:
        today = datetime.datetime.now().strftime("%Y-%m-%d")
        await bot.edit_message_text('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞:\n'
                                    '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                                    '<b>‚óΩ–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò</b>\n'
                                    f'‚óæÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 24 —á–∞—Å–∞: {select_today_users(today)}\n'
                                    f'‚óæÔ∏è–í—Å–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {select_admins()}\n'
                                    f'‚óæÔ∏è–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {get_user_count()}\n'
                                    '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                                    '‚óΩ<b>–°–†–ï–î–°–¢–í–ê</b>\n'
                                    f'‚óæ–ü—Ä–æ–¥–∞–∂ –∑–∞ 24 —á–∞—Å–∞ –Ω–∞: {select_today_orders(today)}‚ÇΩ\n'
                                    f'‚óæ–ü—Ä–æ–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞: {select_all_orders()}‚ÇΩ\n'
                                    f'‚óæ–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞ 24 —á–∞—Å–∞: {select_today_operations(today)}‚ÇΩ\n'
                                    f'‚óæ–°—Ä–µ–¥—Å—Ç–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {select_users_balance()}‚ÇΩ\n'
                                    f'‚óæ–ü–æ–ø–æ–ª–Ω–µ–Ω–æ: {select_all_operations()}‚ÇΩ\n'
                                    '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                                    '‚óΩ<b>–ü–†–û–ß–ï–ï</b>\n'
                                    f'‚óæ–¢–æ–≤–∞—Ä–æ–≤: {select_count_items()}—à—Ç.\n'
                                    f'‚óæ–ü–æ–∑–∏—Ü–∏–π: {select_count_goods()}—à—Ç.\n'
                                    f'‚óæ–ö–∞—Ç–µ–≥–æ—Ä–∏–π: {select_count_categories()}—à—Ç.\n'
                                    f'‚óæ–ü—Ä–æ–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {select_count_bought_items()}—à—Ç.',
                                    chat_id=call.message.chat.id,
                                    message_id=call.message.message_id,
                                    reply_markup=statistic_buttons(),
                                    parse_mode='HTML')
        return
    await call.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')


async def admins_callback_handler(call: CallbackQuery):
    bot, user_id = await get_bot_user_ids(call)
    TgConfig.STATE[user_id] = None
    role = check_role(user_id)
    if role >= Permission.USERS_MANAGE:
        admins = get_all_admins()
        max_index = len(admins) // 10
        if len(admins) % 10 == 0:
            max_index -= 1
        markup = users_list(admins, 0, max_index, "admins")
        await bot.edit_message_text('üëÆ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞:',
                                    chat_id=call.message.chat.id,
                                    message_id=call.message.message_id,
                                    reply_markup=markup)
        return
    await call.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')


async def navigate_admins(call: CallbackQuery):
    bot, user_id = await get_bot_user_ids(call)
    admins = get_all_admins()
    current_index = int(call.data.split('_')[1])
    max_index = len(admins) // 10
    if len(admins) % 10 == 0:
        max_index -= 1
    if 0 <= current_index <= max_index:
        markup = users_list(admins, current_index, max_index, "admins")
        await bot.edit_message_text('üëÆ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞:',
                                    chat_id=call.message.chat.id,
                                    message_id=call.message.message_id,
                                    reply_markup=markup)
    else:
        await call.answer('‚ùå –¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ—Ç')


async def users_callback_handler(call: CallbackQuery):
    bot, user_id = await get_bot_user_ids(call)
    TgConfig.STATE[user_id] = None
    role = check_role(user_id)
    if role >= Permission.USERS_MANAGE:
        users = [x[0] for x in get_all_users()]
        max_index = len(users) // 10
        if len(users) % 10 == 0:
            max_index -= 1
        markup = users_list(users, 0, max_index)
        await bot.edit_message_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞:',
                                    chat_id=call.message.chat.id,
                                    message_id=call.message.message_id,
                                    reply_markup=markup)
        return
    await call.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')


async def navigate_users(call: CallbackQuery):
    bot, user_id = await get_bot_user_ids(call)
    users = [x[0] for x in get_all_users()]
    current_index = int(call.data.split('_')[1])
    max_index = len(users) // 10
    if len(users) % 10 == 0:
        max_index -= 1
    if 0 <= current_index <= max_index:
        markup = users_list(users, current_index, max_index)
        await bot.edit_message_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞:',
                                    chat_id=call.message.chat.id,
                                    message_id=call.message.message_id,
                                    reply_markup=markup)
    else:
        await call.answer('‚ùå –¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ—Ç')


async def show_user_info(call: CallbackQuery):
    query = call.data[10:]
    back_data = query.split('-')[0]
    user_id = query.split('-')[1]
    bot, admin_id = await get_bot_user_ids(call)
    TgConfig.STATE[user_id] = None
    TgConfig.STATE[f'{admin_id}_user_data'] = user_id
    user = check_user(user_id)
    user_info = await bot.get_chat(user_id)
    operations = select_user_operations(user_id)
    overall_balance = 0
    if operations:
        for i in operations:
            overall_balance += i
    items = select_user_items(user_id)
    role = check_role_name_by_id(user.role_id)
    referrals = check_user_referrals(user.telegram_id)
    text = """
–ü–û–î–†–û–ë–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò –í–û–ó–ú–û–ñ–ù–û–°–¢–¨ –í–ó–ê–ò–ú–û–î–ï–ô–¢–°–í–ò–Ø –î–û–°–¢–£–ü–ù–ê –í –†–ê–ó–î–ï–õ–ï
          "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"
    """
    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text=f'<b>{text}</b>\n\n'
                                     f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> ‚Äî {user_info.first_name}\n\nüÜî"
                                     f" <b>ID</b> ‚Äî <code>{user_id}</code>\n"
                                     f"üí≥ <b>–ë–∞–ª–∞–Ω—Å</b> ‚Äî <code>{user.balance}</code> ‚ÇΩ\n"
                                     f"üíµ <b>–í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ</b> ‚Äî <code>{overall_balance}</code> ‚ÇΩ\n"
                                     f"üéÅ <b>–ö—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤</b> ‚Äî {items} —à—Ç\n\n"
                                     f"üë§ <b>–†–µ—Ñ–µ—Ä–∞–ª</b> ‚Äî <code>{user.referral_id}</code>\n"
                                     f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> ‚Äî {referrals}\n"
                                     f"üéõ <b>–†–æ–ª—å</b> ‚Äî {role}\n"
                                     f"üï¢ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</b> ‚Äî <code>{user.registration_date}</code>\n",
                                parse_mode='HTML',
                                reply_markup=back(back_data))


async def show_bought_item_callback_handler(call: CallbackQuery):
    bot, user_id = await get_bot_user_ids(call)
    TgConfig.STATE[user_id] = 'show_item'
    TgConfig.STATE[f'{user_id}_message_id'] = call.message.message_id
    role = check_role(user_id)
    if role >= Permission.SHOP_MANAGE:
        await bot.edit_message_text('–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞',
                                    chat_id=call.message.chat.id,
                                    message_id=call.message.message_id,
                                    reply_markup=back("goods_management"))
        return
    await call.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')


async def process_item_show(message: Message):
    bot, user_id = await get_bot_user_ids(message)
    msg = message.text
    message_id = TgConfig.STATE.get(f'{user_id}_message_id')
    TgConfig.STATE[user_id] = None
    item = select_bought_item(msg)
    await bot.delete_message(chat_id=message.chat.id,
                             message_id=message.message_id)
    if item:
        await bot.edit_message_text(chat_id=message.chat.id,
                                    message_id=message_id,
                                    text=f'<b>–¢–æ–≤–∞—Ä</b>: <code>{item["item_name"]}</code>\n'
                                         f'<b>–¶–µ–Ω–∞</b>: <code>{item["price"]}</code>‚ÇΩ\n'
                                         f'<b>–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏</b>: <code>{item["bought_datetime"]}</code>\n'
                                         f'<b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å</b>: <code>{item["buyer_id"]}</code>\n'
                                         f'<b>–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –æ–ø–µ—Ä–∞—Ü–∏–∏</b>: <code>{item["unique_id"]}</code>\n'
                                         f'<b>–ó–Ω–∞—á–µ–Ω–∏–µ</b>:\n<code>{item["value"]}</code>',
                                    parse_mode='HTML',
                                    reply_markup=back('show_bought_item'))
        return
    await bot.edit_message_text(chat_id=message.chat.id,
                                message_id=message_id,
                                text='‚ùå –¢–æ–≤–∞—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω',
                                reply_markup=back('show_bought_item'))


def register_shop_management(dp: Dispatcher) -> None:
    dp.register_callback_query_handler(statistics_callback_handler,
                                       lambda c: c.data == 'statistics')
    dp.register_callback_query_handler(show_bought_item_callback_handler,
                                       lambda c: c.data == 'show_bought_item')
    dp.register_callback_query_handler(shop_callback_handler,
                                       lambda c: c.data == 'shop_management')
    dp.register_callback_query_handler(logs_callback_handler,
                                       lambda c: c.data == 'show_logs')
    dp.register_callback_query_handler(admins_callback_handler,
                                       lambda c: c.data == 'admins_list')
    dp.register_callback_query_handler(users_callback_handler,
                                       lambda c: c.data == 'users_list')

    dp.register_callback_query_handler(navigate_admins,
                                       lambda c: c.data.startswith('admins-page_'))
    dp.register_callback_query_handler(navigate_users,
                                       lambda c: c.data.startswith('users-page_'))
    dp.register_callback_query_handler(show_user_info,
                                       lambda c: c.data.startswith('show-user_'))

    dp.register_message_handler(process_item_show,
                                lambda c: TgConfig.STATE.get(c.from_user.id) == 'show_item')
