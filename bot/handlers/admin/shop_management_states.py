from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.filters.state import StatesGroup, State
from aiogram.types import FSInputFile

from pathlib import Path

from bot.database.models import Permission
from bot.database.methods import (
    select_today_users, select_admins, get_user_count, select_today_orders,
    select_all_orders, select_today_operations, select_users_balance, select_all_operations,
    select_count_items, select_count_goods, select_count_categories, select_count_bought_items,
    select_bought_item, get_all_admins, get_all_users, check_user, check_user_referrals,
    check_role_name_by_id, select_user_items, select_user_operations
)
from bot.keyboards import back, paginated_keyboard, simple_buttons

from bot.filters import HasPermissionFilter

import datetime

from bot.misc import EnvKeys

router = Router()


class ShopManageFSM(StatesGroup):
    """FSM –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º."""
    waiting_bought_item_id = State()


# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º (SHOP_MANAGE)
@router.callback_query(F.data == 'shop_management', HasPermissionFilter(Permission.SHOP_MANAGE))
async def shop_callback_handler(call: CallbackQuery):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º.
    """
    actions = [
        ("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "statistics"),
        ("üìÅ –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏", "show_logs"),
        ("üëÆ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", "admins_list"),
        ("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "users_list"),
        ("üîé –ü–æ–∏—Å–∫ –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞", "show_bought_item"),
        ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "console"),
    ]
    markup = simple_buttons(actions, per_row=1)
    await call.message.edit_text('‚õ©Ô∏è –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º', reply_markup=markup)


# --- –ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤ (SHOP_MANAGE)
@router.callback_query(F.data == 'show_logs', HasPermissionFilter(Permission.SHOP_MANAGE))
async def logs_callback_handler(call: CallbackQuery):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π.
    """
    file_path = Path(EnvKeys.BOT_AUDITFILE)
    if file_path.exists() and file_path.stat().st_size > 0:
        doc = FSInputFile(file_path, filename=file_path.name)
        await call.message.bot.send_document(
            chat_id=call.message.chat.id,
            document=doc,
            caption="–õ–æ–≥–∏ –±–æ—Ç–∞"
        )
    else:
        await call.answer("‚ùóÔ∏è –õ–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")


# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (SHOP_MANAGE)
@router.callback_query(F.data == 'statistics', HasPermissionFilter(Permission.SHOP_MANAGE))
async def statistics_callback_handler(call: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞.
    """
    today_str = datetime.date.today().isoformat()

    await call.message.edit_text(
        '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞:\n'
        '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
        '<b>‚óΩ–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò</b>\n'
        f'‚óæÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 24 —á–∞—Å–∞: {select_today_users(today_str)}\n'
        f'‚óæÔ∏è–í—Å–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {select_admins()}\n'
        f'‚óæÔ∏è–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {get_user_count()}\n'
        '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
        '‚óΩ<b>–°–†–ï–î–°–¢–í–ê</b>\n'
        f'‚óæ–ü—Ä–æ–¥–∞–∂ –∑–∞ 24 —á–∞—Å–∞ –Ω–∞: {select_today_orders(today_str)}‚ÇΩ\n'
        f'‚óæ–ü—Ä–æ–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞: {select_all_orders()}‚ÇΩ\n'
        f'‚óæ–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞ 24 —á–∞—Å–∞: {select_today_operations(today_str)}‚ÇΩ\n'
        f'‚óæ–°—Ä–µ–¥—Å—Ç–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {select_users_balance()}‚ÇΩ\n'
        f'‚óæ–ü–æ–ø–æ–ª–Ω–µ–Ω–æ: {select_all_operations()}‚ÇΩ\n'
        '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
        '‚óΩ<b>–ü–†–û–ß–ï–ï</b>\n'
        f'‚óæ–¢–æ–≤–∞—Ä–æ–≤: {select_count_items()} —à—Ç.\n'
        f'‚óæ–ü–æ–∑–∏—Ü–∏–π: {select_count_goods()} —à—Ç.\n'
        f'‚óæ–ö–∞—Ç–µ–≥–æ—Ä–∏–π: {select_count_categories()} —à—Ç.\n'
        f'‚óæ–ü—Ä–æ–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {select_count_bought_items()} —à—Ç.',
        reply_markup=back("shop_management"),
        parse_mode='HTML'
    )


# --- –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (USERS_MANAGE)
@router.callback_query(F.data == 'admins_list', HasPermissionFilter(Permission.USERS_MANAGE))
async def admins_callback_handler(call: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    admins = get_all_admins() or []
    markup = paginated_keyboard(
        items=admins,
        item_text=lambda user_id: str(user_id),
        item_callback=lambda user_id: f"show-user_admin-{user_id}",
        page=0,
        per_page=10,
        back_cb="shop_management",
        nav_cb_prefix="admins-page_",
    )
    await call.message.edit_text('üëÆ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞:', reply_markup=markup)


# --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∞–¥–º–∏–Ω–æ–≤
@router.callback_query(F.data.startswith('admins-page_'), HasPermissionFilter(Permission.USERS_MANAGE))
async def navigate_admins(call: CallbackQuery):
    """
    –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ —Å–ø–∏—Å–∫—É –∞–¥–º–∏–Ω–æ–≤.
    """
    try:
        current_index = int(call.data.split('_')[1])
    except Exception:
        current_index = 0

    admins = get_all_admins() or []
    markup = paginated_keyboard(
        items=admins,
        item_text=lambda user_id: str(user_id),
        item_callback=lambda user_id: f"show-user_admin-{user_id}",
        page=current_index,
        per_page=10,
        back_cb="shop_management",
        nav_cb_prefix="admins-page_",
    )
    await call.message.edit_text('üëÆ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞:', reply_markup=markup)


# --- –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (USERS_MANAGE)
@router.callback_query(F.data == 'users_list', HasPermissionFilter(Permission.USERS_MANAGE))
async def users_callback_handler(call: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    users = [row[0] for row in (get_all_users() or [])]
    markup = paginated_keyboard(
        items=users,
        item_text=lambda user_id: str(user_id),
        item_callback=lambda user_id: f"show-user_user-{user_id}",
        page=0,
        per_page=10,
        back_cb="shop_management",
        nav_cb_prefix="users-page_",
    )
    await call.message.edit_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞:', reply_markup=markup)


# --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(F.data.startswith('users-page_'), HasPermissionFilter(Permission.USERS_MANAGE))
async def navigate_users(call: CallbackQuery):
    """
    –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    try:
        current_index = int(call.data.split('_')[1])
    except Exception:
        current_index = 0

    users = [row[0] for row in (get_all_users() or [])]
    markup = paginated_keyboard(
        items=users,
        item_text=lambda user_id: str(user_id),
        item_callback=lambda user_id: f"show-user_user-{user_id}",
        page=current_index,
        per_page=10,
        back_cb="shop_management",
        nav_cb_prefix="users-page_",
    )
    await call.message.edit_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞:', reply_markup=markup)


# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (USERS_MANAGE)
@router.callback_query(F.data.startswith('show-user_'), HasPermissionFilter(permission=Permission.USERS_MANAGE))
async def show_user_info(call: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ—É –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    """
    query = call.data[10:]
    origin, user_id = query.split('-')  # origin: 'user' | 'admin'
    back_target = "users_list" if origin == "user" else "admins_list"

    user = check_user(user_id)
    user_info = await call.message.bot.get_chat(user_id)
    operations = select_user_operations(user_id)
    overall_balance = sum(operations) if operations else 0
    items = select_user_items(user_id)
    role = check_role_name_by_id(user.role_id)
    referrals = check_user_referrals(user.telegram_id)

    await call.message.edit_text(
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> ‚Äî {user_info.first_name}\n\n"
        f"üÜî <b>ID</b> ‚Äî <code>{user_id}</code>\n"
        f"üí≥ <b>–ë–∞–ª–∞–Ω—Å</b> ‚Äî <code>{user.balance}</code> ‚ÇΩ\n"
        f"üíµ <b>–í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ</b> ‚Äî <code>{overall_balance}</code> ‚ÇΩ\n"
        f"üéÅ <b>–ö—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤</b> ‚Äî {items} —à—Ç\n\n"
        f"üë§ <b>–†–µ—Ñ–µ—Ä–∞–ª</b> ‚Äî <code>{user.referral_id}</code>\n"
        f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> ‚Äî {referrals}\n"
        f"üéõ <b>–†–æ–ª—å</b> ‚Äî {role}\n"
        f"üï¢ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</b> ‚Äî <code>{user.registration_date}</code>\n",
        parse_mode='HTML',
        reply_markup=back(back_target)
    )


# --- –ü–æ–∏—Å–∫ –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É ID (SHOP_MANAGE)
@router.callback_query(F.data == 'show_bought_item', HasPermissionFilter(Permission.SHOP_MANAGE))
async def show_bought_item_callback_handler(call: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.
    """
    await call.message.edit_text(
        '–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞',
        reply_markup=back("shop_management")
    )
    await state.set_state(ShopManageFSM.waiting_bought_item_id)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID (SHOP_MANAGE)
@router.message(ShopManageFSM.waiting_bought_item_id, F.text, HasPermissionFilter(Permission.SHOP_MANAGE))
async def process_item_show(message: Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É–ø–ª–µ–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ –ø–æ –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É ID.
    """
    msg = (message.text or "").strip()
    if not msg.isdigit():
        await message.answer(
            '‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.',
            reply_markup=back('show_bought_item')
        )
        return

    item = select_bought_item(int(msg))
    if item:
        await message.answer(
            f'<b>–¢–æ–≤–∞—Ä</b>: <code>{item["item_name"]}</code>\n'
            f'<b>–¶–µ–Ω–∞</b>: <code>{item["price"]}</code>‚ÇΩ\n'
            f'<b>–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏</b>: <code>{item["bought_datetime"]}</code>\n'
            f'<b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å</b>: <code>{item["buyer_id"]}</code>\n'
            f'<b>–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –æ–ø–µ—Ä–∞—Ü–∏–∏</b>: <code>{item["unique_id"]}</code>\n'
            f'<b>–ó–Ω–∞—á–µ–Ω–∏–µ</b>:\n<code>{item["value"]}</code>',
            parse_mode='HTML',
            reply_markup=back('show_bought_item')
        )
    else:
        await message.answer(
            '‚ùå –¢–æ–≤–∞—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω',
            reply_markup=back('show_bought_item')
        )

    await state.clear()
