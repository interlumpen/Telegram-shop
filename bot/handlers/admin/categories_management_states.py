from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters.state import StatesGroup, State

from bot.database.models import Permission
from bot.database.methods import (
    check_category, create_category, delete_category, update_category
)
from bot.keyboards.inline import back, simple_buttons
from bot.filters import HasPermissionFilter
from bot.logger_mesh import audit_logger

router = Router()


class CategoryFSM(StatesGroup):
    """
    FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:
    - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ,
    - —É–¥–∞–ª–µ–Ω–∏–µ,
    - –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ.
    """
    waiting_add_category = State()
    waiting_delete_category = State()
    waiting_update_category = State()
    waiting_update_category_name = State()


# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (SHOP_MANAGE)
@router.callback_query(F.data == 'categories_management', HasPermissionFilter(permission=Permission.SHOP_MANAGE))
async def categories_callback_handler(call: CallbackQuery):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏.
    """
    actions = [
        ("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", "add_category"),
        ("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", "update_category"),
        ("üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", "delete_category"),
        ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "console"),
    ]
    await call.message.edit_text(
        "‚õ©Ô∏è –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏",
        reply_markup=simple_buttons(actions, per_row=1)
    )


# --- –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data == 'add_category', HasPermissionFilter(permission=Permission.SHOP_MANAGE))
async def add_category_callback_handler(call: CallbackQuery, state):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    await call.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=back("categories_management"),
    )
    await state.set_state(CategoryFSM.waiting_add_category)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.message(CategoryFSM.waiting_add_category, F.text)
async def process_category_for_add(message: Message, state):
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç.
    """
    category_name = message.text.strip()

    if check_category(category_name):
        await message.answer(
            "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ (—Ç–∞–∫–∞—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)",
            reply_markup=back("categories_management"),
        )
    else:
        create_category(category_name)
        await message.answer(
            "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞",
            reply_markup=back("categories_management"),
        )
        admin_info = await message.bot.get_chat(message.from_user.id)
        audit_logger.info(
            f'Admin {message.from_user.id} ({admin_info.first_name}) created category "{category_name}"'
        )

    await state.clear()


# --- –ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data == 'delete_category', HasPermissionFilter(permission=Permission.SHOP_MANAGE))
async def delete_category_callback_handler(call: CallbackQuery, state):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    """
    await call.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=back("categories_management")
    )
    await state.set_state(CategoryFSM.waiting_delete_category)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.message(CategoryFSM.waiting_delete_category, F.text)
async def process_category_for_delete(message: Message, state):
    """
    –£–¥–∞–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    """
    category_name = message.text.strip()

    if not check_category(category_name):
        await message.answer(
            "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–¥–∞–ª–µ–Ω–∞ (—Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)",
            reply_markup=back("categories_management"),
        )
    else:
        # –ë–î —Å—Ç–æ–∏—Ç FK –Ω–∞ goods.category_name -> categories.name.
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏, —É–¥–∞–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ (RESTRICT).
        delete_category(category_name)
        await message.answer(
            "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞",
            reply_markup=back("categories_management")
        )
        admin_info = await message.bot.get_chat(message.from_user.id)
        audit_logger.info(
            f'Admin {message.from_user.id} ({admin_info.first_name}) deleted category "{category_name}"'
        )

    await state.clear()


# --- –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data == 'update_category', HasPermissionFilter(permission=Permission.SHOP_MANAGE))
async def update_category_callback_handler(call: CallbackQuery, state):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –µ—ë –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è.
    """
    await call.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å:",
        reply_markup=back("categories_management")
    )
    await state.set_state(CategoryFSM.waiting_update_category)


# --- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∑–∞—Ç–µ–º –ø—Ä–æ—Å–∏–º –Ω–æ–≤–æ–µ –∏–º—è
@router.message(CategoryFSM.waiting_update_category, F.text)
async def check_category_for_update(message: Message, state):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞—Ç–µ–º –ø—Ä–æ—Å–∏—Ç —É–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ–µ –∏–º—è.
    """
    old_name = message.text.strip()

    # –°–Ω–∞—á–∞–ª–∞ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –µ—Å—Ç—å
    if not check_category(old_name):
        await message.answer(
            "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (—Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)",
            reply_markup=back("categories_management")
        )
        await state.clear()
        return

    await state.update_data(old_category=old_name)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=back("categories_management")
    )
    await state.set_state(CategoryFSM.waiting_update_category_name)


# --- –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.message(CategoryFSM.waiting_update_category_name, F.text)
async def check_category_name_for_update(message: Message, state):
    """
    –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.
    """
    new_name = message.text.strip()
    data = await state.get_data()
    old_name = data.get("old_category")

    # –ï—Å–ª–∏ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ –µ—Å—Ç—å ‚Äî –æ—Ç–∫–∞–∑—ã–≤–∞–µ–º.
    if check_category(new_name):
        await message.answer(
            "‚ùå –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)",
            reply_markup=back("categories_management"),
        )
        await state.clear()
        return

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º (–º–µ—Ç–æ–¥ update_category –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å —Å—Å—ã–ª–æ–∫ –∏–∑ goods)
    update_category(old_name, new_name)
    await message.answer(
        f'‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "{old_name}" –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ "{new_name}"',
        reply_markup=back("categories_management"),
    )

    admin_info = await message.bot.get_chat(message.from_user.id)
    audit_logger.info(
        f'Admin {message.from_user.id} ({admin_info.first_name}) renamed category "{old_name}" to "{new_name}"'
    )

    await state.clear()
